using Abp.UI;
using CmsFeature.CmsNamespace;
using CmsFeature.CmsNamespace.Dto;
using CmsFeature.EntityFrameworkCore;
using CmsFeature.MultiTenancy;
using CmsFeature.MultiTenancy.Dto;
using CmsFeature.Tests.Data;
using Shouldly;
using System.Linq;
using System.Threading.Tasks;
using Xunit;

namespace CmsFeature.Tests.CMS
{
    public class CmsAppService_Tests : CmsFeatureTestBase
    {
        private readonly ICmsAppService _cmsAppService;

        public CmsAppService_Tests()
        {
            _cmsAppService = Resolve<ICmsAppService>();
        }

        [Fact]
        public async Task Should_Get_Test_Cms_Pages()
        {
            var output = await _cmsAppService.GetAll(new PagedCmsResultRequestDto());
            output.Items.Count.ShouldBe(1);
        }

        [Fact]
        public async Task Should_Get_Test_Cms_Page_By_Id()
        {
            //Arrange
            var pageId = 1;

            //Act
            var output = await _cmsAppService.GetCMSContent(pageId);

            //Assert
            output.ShouldNotBe(null);
        }

        [Fact]
        public async Task Should_Not_Get_Test_Cms_Page_By_Id()
        {
            //Arrange
            var pageId = 0;

            //Act
            await Assert.ThrowsAsync<UserFriendlyException>(async () =>
            {
                await _cmsAppService.GetCMSContent(pageId);
            });
        }

        [Fact]
        public async Task Should_Create_Cms_Page()
        {
            //Arrange
            var pageName = "First Page";
            var pageContent = "The page content";

            //Act
            await _cmsAppService.InsertOrUpdateCMSContentAsync(
                new InsertOrUpdateCMSContentDto
                {
                    Id = 0,
                    PageName = pageName,
                    PageContent = pageContent
                });

            //Assert
            UsingDbContext(context =>
            {
                context.Cmss.FirstOrDefault(e => e.PageName.Equals(pageName)).ShouldNotBe(null);
            });
        }

        [Fact]
        public async Task Should_Not_Create_Cms_Min_Id()
        {
            //Arrange
            var id = -1;
            var pageName = "First Page Name";
            var pageContent = "The page content";

            //Act
            await Assert.ThrowsAsync<UserFriendlyException>(async () =>
            {
                await _cmsAppService.InsertOrUpdateCMSContentAsync(
                    new InsertOrUpdateCMSContentDto
                    {
                        Id = id,
                        PageName = pageName,
                        PageContent = pageContent
                    });
            });
        }

        [Fact]
        public async Task Should_Not_Create_Cms_Page_Name_Length_Max()
        {
            //Arrange
            var pageName = "First Page Name length is way greater than maximum limit of 64 First Page N";
            var pageContent = "The page content";

            //Act
            await Assert.ThrowsAsync<UserFriendlyException>(async () =>
            {
                await _cmsAppService.InsertOrUpdateCMSContentAsync(
                    new InsertOrUpdateCMSContentDto
                    {
                        Id = 0,
                        PageName = pageName,
                        PageContent = pageContent
                    });
            });
        }

        [Fact]
        public async Task Should_Not_Create_Cms_Page_Name_Length_Min()
        {
            //Arrange
            var pageName = "A";
            var pageContent = "The page content";

            //Act
            await Assert.ThrowsAsync<UserFriendlyException>(async () =>
            {
                await _cmsAppService.InsertOrUpdateCMSContentAsync(
                    new InsertOrUpdateCMSContentDto
                    {
                        Id = 0,
                        PageName = pageName,
                        PageContent = pageContent
                    });
            });
        }

        [Fact]
        public async Task Should_Not_Create_Cms_Page_Content_Length_Max()
        {
            //Arrange
            var pageName = "First Page";
            var pageContent = @"01234567890012345678900123456789001234567890012345678900123456789001234567890012345678900123456789001234567890
01234567890012345678900123456789001234567890012345678900123456789001234567890012345678900123456789001234567890
01234567890012345678900123456789001234567890012345678900123456789001234567890012345678900123456789001234567890
01234567890012345678900123456789001234567890012345678900123456789001234567890012345678900123456789001234567890
01234567890012345678900123456789001234567890012345678900123456789001234567890012345678900123456789001234567890
01234567890012345678900123456789001234567890012345678900123456789001234567890012345678900123456789001234567890
01234567890012345678900123456789001234567890012345678900123456789001234567890012345678900123456789001234567890
01234567890012345678900123456789001234567890012345678900123456789001234567890012345678900123456789001234567890
01234567890012345678900123456789001234567890012345678900123456789001234567890012345678900123456789001234567890
01234567890012345678900123456789001234567890012345678900123456789001234567890012345678900123456789001234567890
01234567890012345678900123456789001234567890012345678900123456789001234567890012345678900123456789001234567890
01234567890012345678900123456789001234567890012345678900123456789001234567890012345678900123456789001234567890
01234567890012345678900123456789001234567890012345678900123456789001234567890012345678900123456789001234567890
01234567890012345678900123456789001234567890012345678900123456789001234567890012345678900123456789001234567890
01234567890012345678900123456789001234567890012345678900123456789001234567890012345678900123456789001234567890
01234567890012345678900123456789001234567890012345678900123456789001234567890012345678900123456789001234567890
01234567890012345678900123456789001234567890012345678900123456789001234567890012345678900123456789001234567890
01234567890012345678900123456789001234567890012345678900123456789001234567890012345678900123456789001234567890
01234567890012345678900123456789001234567890012345678900123456789001234567890012345678900123456789001234567890
01234567890012345678900123456789001234567890012345678900123456789001234567890012345678900123456789001234567890
01234567890012345678900123456789001234567890012345678900123456789001234567890012345678900123456789001234567890
01234567890012345678900123456789001234567890012345678900123456789001234567890012345678900123456789001234567890
01234567890012345678900123456789001234567890012345678900123456789001234567890012345678900123456789001234567890
01234567890012345678900123456789001234567890012345678900123456789001234567890012345678900123456789001234567890
01234567890012345678900123456789001234567890012345678900123456789001234567890012345678900123456789001234567890
01234567890012345678900123456789001234567890012345678900123456789001234567890012345678900123456789001234567890
01234567890012345678900123456789001234567890012345678900123456789001234567890012345678900123456789001234567890
01234567890012345678900123456789001234567890012345678900123456789001234567890012345678900123456789001234567890
01234567890012345678900123456789001234567890012345678900123456789001234567890012345678900123456789001234567890
01234567890012345678900123456789001234567890012345678900123456789001234567890012345678900123456789001234567890
01234567890012345678900123456789001234567890012345678900123456789001234567890012345678900123456789001234567890
01234567890012345678900123456789001234567890012345678900123456789001234567890012345678900123456789001234567890
01234567890012345678900123456789001234567890012345678900123456789001234567890012345678900123456789001234567890
01234567890012345678900123456789001234567890012345678900123456789001234567890012345678900123456789001234567890
01234567890012345678900123456789001234567890012345678900123456789001234567890012345678900123456789001234567890
01234567890012345678900123456789001234567890012345678900123456789001234567890012345678900123456789001234567890
01234567890012345678900123456789001234567890012345678900123456789001234567890012345678900123456789001234567890
01234567890012345678900123456789001234567890012345678900123456789001234567890012345678900123456789001234567890
01234567890012345678900123456789001234567890012345678900123456789001234567890012345678900123456789001234567890
01234567890012345678900123456789001234567890012345678900123456789001234567890012345678900123456789001234567890
01234567890012345678900123456789001234567890012345678900123456789001234567890012345678900123456789001234567890
01234567890012345678900123456789001234567890012345678900123456789001234567890012345678900123456789001234567890
01234567890012345678900123456789001234567890012345678900123456789001234567890012345678900123456789001234567890
01234567890012345678900123456789001234567890012345678900123456789001234567890012345678900123456789001234567890
01234567890012345678900123456789001234567890012345678900123456789001234567890012345678900123456789001234567890
01234567890012345678900123456789001234567890012345678900123456789001234567890012345678900123456789001234567890
01234567890012345678900123456789001234567890012345678900123456789001234567890012345678900123456789001234567890
01234567890012345678900123456789001234567890012345678900123456789001234567890012345678900123456789001234567890
01234567890012345678900123456789001234567890012345678900123456789001234567890012345678900123456789001234567890
01234567890012345678900123456789001234567890012345678900123456789001234567890012345678900123456789001234567890";

            //Act
            await Assert.ThrowsAsync<UserFriendlyException>(async () =>
            {
                await _cmsAppService.InsertOrUpdateCMSContentAsync(
                    new InsertOrUpdateCMSContentDto
                    {
                        Id = 0,
                        PageName = pageName,
                        PageContent = pageContent
                    });
            });
        }

        [Fact]
        public async Task Should_Not_Create_Cms_Page_Content_Length_Min()
        {
            //Arrange
            var pageName = "The first page";
            var pageContent = "T";

            //Act
            await Assert.ThrowsAsync<UserFriendlyException>(async () =>
            {
                await _cmsAppService.InsertOrUpdateCMSContentAsync(
                    new InsertOrUpdateCMSContentDto
                    {
                        Id = 0,
                        PageName = pageName,
                        PageContent = pageContent
                    });
            });
        }

        private Cms GetTestCms()
        {
            return UsingDbContext(context => GetTestCms(context));
        }

        private static Cms GetTestCms(CmsFeatureDbContext context)
        {
            return context.Cmss.Single(e => e.PageName.Equals(TestDataBuilder.CmsPageName));
        }
    }
}
